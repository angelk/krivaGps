{% extends "base.html.twig" %}

{% block content %}
    <div style="height: 50vh; min-height: 300px; width: 100%;" id="map"></div>
    <div class="">
        <input type="checkbox" id="map_show_mtb" checked /><label for="map_show_mtb">{{ 'by bike'|trans }}</label>
        |
        <input type="checkbox" id="map_show_foot" checked /><label for="map_show_foot">{{ 'by foot'|trans }}</label>
    </div>

    <hr>
    <div class="container-fluid">
        <div class="row">
            <div class="col">
                <a href="#" title="{{ 'Subscribe via RSS'|trans }}">
                    <i class="fas fa-rss"></i>
                </a>
                <div>{{ "Latest tracks by bicycle"|trans }}:</div>
                <ul>
                    {% for track in latestTracks %}
                        <li>
                            <a href="{{ path('gps-view', { id: track.slugOrId}) }}">
                                {% if track.name(app.request.locale) is empty %}
                                    {{ track.id }}
                                {% else %}
                                    {{ track.name(app.request.locale) }}
                                {% endif %}
                            </a>
                        </li>
                    {% endfor %}
                </ul>
            </div>

            <div class="col">
                <div>{{ "Latest tracks by foot"|trans }}:</div>
                <ul>
                    {% for track in latestTracksHike %}
                        <li>
                            <a href="{{ path('gps-view', { id: track.slugOrId}) }}">
                                {% if track.name(app.request.locale) is empty %}
                                    {{ track.id }}
                                {% else %}
                                    {{ track.name(app.request.locale) }}
                                {% endif %}
                            </a>
                        </li>
                    {% endfor %}
                </ul>
            </div>
        </div>

        {% if latestImages is defined and latestImages is not empty %}
            {{ 'Latest pictures'|trans }}:
            <div class="uploaded_images uploaded_images_all">
                {% for image in latestImages %}
                    <a href="{{ path('gps-view', { id: image.track.slugOrId }) }}"
                        title="{{- 'View the trail'|trans -}}
                            {%- if image.track.name(app.request.locale) is not empty -%}
                                {{ ' &quot;' }} {{- image.track.name(app.request.locale) -}}{{- '&quot;' -}}
                            {%- endif -%}"
                    >
                        <img
                            src="{{ app_track_image(image, 300, 300) }}"
                            alt="{{ 'Picture from'|trans }} {{ image.track.name(app.request.locale) }}"
                            loading="lazy"
                        >
                    </a>
                {% endfor %}
            </div>
        {% endif %}
    </div>

    <script>
        var mapOptions = {
            showByBike: true,
            showByFoot: true
        };

        var gpsColors = [
            'blue',
            'black',
            'indigo',
            'orange',
            'purple',
            'red',
        ];
        var map = L.map(
            'map',
            {
                gestureHandling: true
            }
        ).setView([42.15, 24.75], 12);
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(map);

        map.addControl(new MapControlFullScreen());

        var loadedTracks = {};
        var loadedPlaces = {};

        let placesMarkers = L.markerClusterGroup({
            animateAddingMarkers: true,
            chunkedLoading: true
        });

        var moveEndListener = function() {
            var ajax = new XMLHttpRequest();
            ajax.onreadystatechange = function() {
                if (this.readyState != 4 || this.status != 200) {
                    return;
                }

                const responseAsJson = JSON.parse(this.responseText);

                // tracks
                (function (data) {
                    const responseStatus = data.status;

                    if (responseStatus != 0 && responseStatus != 2) {
                        // unknown error
                        // @FIXME show error
                        return;
                    }

                    const tracksData = data.data;

                    for (let i = 0; i < tracksData.length; i++) {
                        let id = tracksData[i].id;
                        let slugOrId = tracksData[i].slugOrId;

                        if (loadedTracks[id]) {
                            continue;
                        }


                        var polylineCollection = [];
                        for (let j = 0; j < tracksData[i].points.length; j++) {
                            let points = tracksData[i].points[j];
                            let pointsAsPolyline = [];
                            for (let pointIndex = 0; pointIndex < points.length; pointIndex++) {
                                pointsAsPolyline.push([
                                    points[pointIndex].lat,
                                    points[pointIndex].lng
                                ]);
                            }

                            let polylineColor = gpsColors[Math.floor(Math.random()*gpsColors.length)];
                            let polyline = L.polyline(pointsAsPolyline, {color: polylineColor});
                            polylineCollection.push(polyline);
                            polyline.bindPopup('<a href="/{{ app.request.locale }}/gps/view/' + encodeURIComponent(slugOrId) + '">{{ 'View details'|trans|e('js') }}</a>');
                        }

                        let track = new AppTrack(map, polylineCollection);
                        track.setType(tracksData[i].type);

                        switch (track.getType()) {
                            case 1:
                                if (mapOptions.showByBike) {
                                    track.show();
                                }
                                break;
                            case 2:
                                if (mapOptions.showByFoot) {
                                    track.show();
                                }
                                break;
                            default:
                                track.show();
                        }

                        loadedTracks[id] = track;
                    }

                    if (responseStatus == 2) {
                        moveEndListener();
                    }
                })(responseAsJson.tracks);

                // places
                (function (data) {
                    const responseStatus = data.status;

                    if (responseStatus != 0 && responseStatus != 2) {
                        // unknown error
                        // @FIXME show error
                        return;
                    }

                    const placesData = data.data;

                    for (let i = 0; i < placesData.length; i++) {
                        const id = placesData[i].id;

                        if (loadedPlaces[id]) {
                            continue;
                        }

                        const marker = L.marker([placesData[i].lat, placesData[i].lng]);

                        const ahrefPop = document.createElement('a');
                        ahrefPop.href = '/{{ app.request.locale }}/place/view/' + placesData[i].id;
                        ahrefPop.innerText = 'View details';
                        if (placesData[i].name) {
                            ahrefPop.innerText = placesData[i].name;
                        }

                        const popup = L.popup()
                            .setLatLng([placesData[i].lat, placesData[i].lng])
                            .setContent(ahrefPop.outerHTML);
                        marker.bindPopup(popup);
                        placesMarkers.addLayer(marker);
                        loadedPlaces[id] = placesData[i];
                    }
                    map.addLayer(placesMarkers);
                    placesMarkers.refreshClusters();

                    if (responseStatus == 2) {
                        moveEndListener();
                    }
                })(responseAsJson.places);
            };

            let url = '/{{ app.request.locale }}/gps/list';
            url += '/' + map.getBounds().getNorthEast().lat;
            url += '/' + map.getBounds().getNorthEast().lng;
            url += '/' + map.getBounds().getSouthWest().lat;
            url += '/' + map.getBounds().getSouthWest().lng;

            let postData = new FormData();
            let fetchedTracksIds = [];
            for (let key in loadedTracks) {
                fetchedTracksIds.push(key);
            }
            let fetchedPLacesIds = [];
            for (let key in loadedPlaces) {
                fetchedPLacesIds.push(key);
            }

            postData.append('skipTracks', fetchedTracksIds);
            postData.append('skipPlaces', fetchedPLacesIds);

            ajax.open('POST', url);
            ajax.send(postData);
        };

        map.on('moveend', moveEndListener);

        map.panTo(new L.LatLng(42.15, 24.75));
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(function(position) {
                map.panTo(new L.LatLng(position.coords.latitude, position.coords.longitude));
            });
        }

        // filter for track by type
        document.getElementById('map_show_mtb').addEventListener('click', function() {
            mapOptions.showByBike = this.checked;
            for(let trackId in loadedTracks) {
                let track = loadedTracks[trackId];
                if (track.getType() === 1) {
                    if (this.checked) {
                        track.show();
                    } else {
                        track.hide();
                    }
                }
            }
        });

        document.getElementById('map_show_foot').addEventListener('click', function() {
            mapOptions.showByFoot = this.checked;
            for(let trackId in loadedTracks) {
                let track = loadedTracks[trackId];
                if (track.getType() === 2) {
                    if (this.checked) {
                        track.show();
                    } else {
                        track.hide();
                    }
                }
            }
        });

    </script>
{% endblock %}
